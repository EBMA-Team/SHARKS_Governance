---
title: "SHARKS_Governance"
author: "Corey Scholes"
affiliation: "EBM Analytics"
version: 3.0
type: "website"
number-sections: true
number-depth: 3
date: "2025-Apr-15"
date-modified: "2025-Apr-15"

bibliography: SHARKSGov references.bib

editor:
  visual
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    
execute: 
  echo: true
  warning: false
  message: false
---

# Introduction

The following analysis is a report on the activity, quality and data contained in the SHARKS registry \[wiki\]

## Preparation

Packages were loaded initially with *pacman* package. Citations were applied to each library at first use in the text.

```{r, load-pkgs}

if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Load required packages
  "ggforce",
  "ggdag",
  "ggmap",
  "geosphere",
  "dplyr",
  "flextable",
  "litedown",
  "grateful",
  "modelsummary",
  "quantreg",
  "readr",
  "knitr",
  "cardx",
  "forcats",
  "gargle",
  "googledrive",
  "googlesheets4",
  "openxlsx2",
  "tidyverse",
  "tidymodels",
  "lubridate",
  "consort",
  "gtsummary",
  "survival",
  "ggplot2",
  "ggdist",
  "ggfortify",
  "mice",
  "marginaleffects",
  "naniar",
  "quantreg",
  "broom",
  "epoxy",
  "broom.helpers",
  "stringr"
  )
  
  
```

## Authorisations

Access to SHARKS datasets was pre-authorised using the *gargle* package and *googledrive*.

```{r}
#| label: auth2
#| echo: false

options(
  gargle_oauth_cache = ".secrets",
  gargle_oauth_email = TRUE
)

googledrive::drive_auth(
  cache = ".secrets", 
  email = TRUE
  )
```

## Functions for Processing

A function was generated to retrieve files using the *googledrive* package, to call on later in the analysis for processing data imports.

```{r}

#| label: folder
#| echo: false

base_folder_id1 <- "10PC4-TOygmM55QyC3GDjZ3EiYtO1akFw"


```

```{r}
get_specific_snapshot <- function(folder_name, base_folder_id = base_folder_id1) {
  tryCatch({
    # Check if the folder exists in the base directory
    folder <- googledrive::drive_ls(as_id(base_folder_id), pattern = paste0("^", folder_name, "$"))
    
    if(nrow(folder) == 0) {
      stop(paste("Folder", folder_name, "not found"))
    }
    
    # Find the snapshot file in the specified folder
    snapshot_file <- googledrive::drive_ls(
      folder$id, 
      pattern = "Registry data snapshot\\.xlsx$"
    )
    
    if(nrow(snapshot_file) == 0) {
      stop("No snapshot file found in specified folder")
    }
    
    # Return both pieces of information as a list
    return(list(
      snapshot = snapshot_file,
      folder_name = folder$name
    ))
    
  }, error = function(e) {
    stop(paste("Error finding specified snapshot:", e$message))
  })
}
```

## Data Import and Preparation

Data was retrieved using *googlesheets4* to retrieve live database tables. Source files were specified and stored as global variables to call on in further functions.

```{r}
#| label: live-table
#| echo: false

SheetIDs <- list(
DbSS = "https://docs.google.com/spreadsheets/d/1JPXxLYIlQDzMLCw5mwYKW9al78n7jCCdZEzbk6TUDYo/edit",
PreRegScreen = "https://docs.google.com/spreadsheets/d/1sS2cRYkVaoXzE5Lnm5gn78d5en4cX35B-kLXHaok-J8/edit",
PICSFResp = "https://docs.google.com/spreadsheets/d/1HOhXbZtyVLxt_CBv91b3lr9WWbQvPFcL0VYM0m-wuNI/edit",
ClinicAssess = "https://docs.google.com/spreadsheets/d/1RtsPLxxz4dWqp9LEz7z_5cusxZ9r2EnlnwhATM3rv7Y/edit",
ConsultList = "https://docs.google.com/spreadsheets/d/1eKz-qgNoDNhw-Zyf44wH8wU32Q7BMgkF7zBQ8aPYP-c/edit"
)

# Treatments Masterlist - Timestamp is > Registry Start date (gsuite)

```

```{r}
#| label: read-tables

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())



ComplicTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "Complications", 
  col_names = TRUE, 
  col_types = "cccTliicicccccccccccccccccDccD"
  )


#To match to acctData
PatientTable <- googlesheets4::range_read(
  ss = SheetIDs$DbSS,
  sheet = "Patient", 
  range = "A10:P",
  col_names = FALSE, 
  col_types = "DccccDcccDccicci"
  )


Patient_Col <- c(
  "PatientCreationDate",
  "PatientID",
  "LastName",	
  "FirstName",	
  "AlternateID",	
  "DateOfBirth",	
  "Sex",	
  "RegistryStatus",	
  "RegistryStatusNotes",	
  "DateRegistryStatus",	
  "NotificationMethod",	
  "ConsentStatus",
  "NoTreatmentRECORDs",	
  "Email",	
  "Phone",
  "TrueNoTreatments"
)

colnames(PatientTable) <- Patient_Col


# Top end of STROBE
# 
# 

Invite <- googlesheets4::range_read(
  ss = SheetIDs$ConsultList,
  sheet = "MessageMediaLog", 
  range = "A8:U", #Drop test entries
  col_names = FALSE, 
  col_types = "TiccDcccccccccDcccD?c"
  )


Invite_Col <- c(
  "Timestamp",	
  "CohortID",	
  "Timepoint",	
  "FormID",
  "AppointmentDate",
  "URN",
  "ApptType",
  "LastName",
  "FirstName",
  "PostCode",
  "Phone",
  "DestPhone",
  "MessageID",
  "MessageStatus",
  "DateofBirth",
  "Sex",
  "Resource",
  "ProcedureName",
  "AdditionDate",
  "PROMsLink",
  "Contents"

)

colnames(Invite) <- Invite_Col




PreReg <- googlesheets4::range_read(
  ss = SheetIDs$PreRegScreen,
  sheet = "SHARKS - Pre-registry Screening_RawData", 
  range = "A8:BD", #Drop test entries
  col_names = FALSE, 
  col_types = "cccTliiccccccccccccccccccccccccccccccccccccccccccccccccc"
  )

PreReg_Col <- c(
  "ResponseID",
  "ResponseStatus",
  "IPAddress",	
  "Timestamp",	
  "Duplicate",	
  "TimeComplete",	
  "SeqNo",	
  "ExternalRef",	
  "CohortID",	
  "Timepoint",	
  "FormID",	
  "CustomVar",
  "RegistryConsent",	
  "RespEmail",	
  "EmailList",
  "CountryCode",
  "Region",	
  "Country",
  "Long",	
  "Lat",	
  "Radius",
  "Browser",
  "Device",	
  "OperatingSystem",	
  "Language", 
  "MessText",
  "AppointmentReas",	
  "FollowupVisit",	
  "LeftShoulder",	
  "RightShoulder",	
  "LeftHandWristElbow",	
  "RightHandWristElbow",	
  "LeftHip",	
  "RightHip",	
  "LeftKnee",	
  "RightKnee",	
  "LeftFootAnkleLegBelowKnee",	
  "RightFootAnkleLegBelowKnee",	
  "LeftSomethingElse",	
  "RightSomethingElse",	
  "ShoulderArthritis",	
  "ShoulderPreviousJointReplacement",	
  "ShoulderBrokenBone",	
  "ShoulderOtherInjury",	
  "ShoulderNotSure",	
  "HipArthritis",	
  "HipPreviousJointReplacement",	
  "HipBrokenBone",	
  "HipOtherInjury",	
  "HipNotSure",	
  "KneeArthritis",	
  "KneePreviousJointReplacement",	
  "KneeBrokenBone",	
  "KneeOtherInjury",	
  "KneeNotSure",	
  "Status"
)

colnames(PreReg) <- PreReg_Col


PISCF <- googlesheets4::range_read(
  ss = SheetIDs$PICSFResp,
  sheet = "SHARKS - PISCF_RawData", 
  range = "A8:AN", #Drop test entries
  col_names = FALSE, 
  col_types = "cccTliiciccccccccccccccccccccccccccc?ccc"
  )

PISCF_Col <- c(
  "ResponseID",
  "ResponseStatus",
  "IPAddress",	
  "Timestamp",	
  "Duplicate",	
  "TimeComplete",	
  "SeqNo",	
  "ExternalRef",	
  "CohortID",	
  "Timepoint",	
  "FormID",	
  "CustomVar",
  "RegistryConsent",	
  "RespEmail",	
  "EmailList",
  "CountryCode",
  "Region",	
  "Country",
  "Long",	
  "Lat",	
  "Radius",
  "Browser",
  "Device",	
  "OperatingSystem",	
  "Language", 
  "MessText",
  "PISCF1",
  "PISCF2",
  "ConsentState",
  "CheckBox1",
  "Checkbox2",
  "Checkbox3",
  "Checkbox4",
  "Checkbox5",
  "Name",
  "RepName",
  "Signature",
  "SendRep",
  "RegistryStatus",
  "ReportStatus"
)

colnames(PISCF) <- PISCF_Col

```

```{r}


CAFTable <- googlesheets4::range_read(
  ss = SheetIDs$ClinicAssess,
  sheet = "SHARKS - Clinic Assessment Form_RawData", 
  range = "A2:BH",
  col_names = TRUE, 
  col_types = "ccccliiciccccccccccccccccccccnnnnnnnnnnnncccciinnnnccccccccc"
  )


```

A static registry snapshot was retrieved using the pre-specified function (see *Functions for Processing)* and formatted using *openxlsx* based on the fixed date of preparation of the snapshot (30-Jun-2024) and using *tidyverse* syntax and associated packages (*dplyr, lubridate*). Date columns were prepared for further analysis using *lubridate*.

```{r}

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())

# To get a snapshot from a specific folder (e.g., "20230415")
specific_snapshot <- get_specific_snapshot("20250331")


```

```{r}

temp_file1 <- tempfile(fileext = ".xlsx")
drive_download(
  file = specific_snapshot$snapshot$id,
  path = temp_file1,
  overwrite = TRUE
)

# Correction to reset back to excel origin
DaysDiff <- as.numeric(as.duration(interval(ymd("1899-12-30"), ymd("1970-01-01"))),"days")


Snapshot <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Combined",
  colNames = TRUE,
  detectDates = TRUE
  ) |> mutate(
    URN = stringr::str_split_i(TreatmentID,"\\.",1)
  ) |> unite(
  col = "CombID",
  sep = ".",
  c("URN","AffectedSide"),
  remove = FALSE
)

STROBEInput <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Strobe_Input",
  colNames = TRUE,
  detectDates = TRUE
  )

```

# Recreate looker plots

```{r}
#| label: baseline-vr12
#| fig-cap: "Summary of VR12-PCS at baseline by cohort"

FigureVR12PCS <- Snapshot |> dplyr::filter(RegistryCohortName != "KneeDeformity") |>
  ggplot(aes(y = RegistryCohortName, x = VR12PCS_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12PCS)

```

# Missingness and Compliance

```{r}
#| label: missingness-baseline

naniar::gg_miss_var(
  Snapshot |> dplyr::filter(
      EligibleAtPreop == "Yes"
      ) |> dplyr::select(
    RegistryCohortName,
    VR12PCS_Preop
    ), 
  facet = RegistryCohortName,
  show_pct = TRUE
  )


```

# STROBE by Region

```{r}

STROBEFlow2 <- STROBEInput |> 
  # Filter out rows with missing TreatmentID
  dplyr::filter(!is.na(TreatmentID)) |> 
  # Join with relevant columns from Snapshot
  dplyr::left_join(
    Snapshot |> 
      dplyr::select(
        TreatmentID,
        CombID,
        DateInitialExamination,
        EligibleAtPreop,
        EligibleAtx12months
      ) |> 
      # Convert all date columns to date format
      dplyr::mutate(
        across(contains("Date"), lubridate::ymd)
      ),
    # Explicitly specify join column
    by = "TreatmentID"
  )

```

```{r}

CurrentDate <- as.character("20250331")

STROBEFlow3 <- STROBEFlow2 |> dplyr::mutate(
  Joint = case_when(
    stringr::str_detect(RegistryCohortName,"^G|^R") ~ "Shoulder",
    stringr::str_detect(RegistryCohortName,"^K|^T") ~ "Knee",
    stringr::str_detect(RegistryCohortName,"^H") ~ "Hip",
  ),
  exclusion1 = case_when(
    is.na(SurgicalTreatment) ~ "Not a surgical treatment",
    SurgicalTreatment == "Surgical" & stringr::str_detect(RegistryStatus,"Opt-out") ~ "Patient Opt-Out",
    SurgicalTreatment == "Surgical" & is.na(RegistryCohortName) ~ "No cohort",
    SurgicalTreatment == "Surgical" ~ NA_character_,
    .default = "Not a surgical treatment"
  ),
  followup = if_else(
    is.na(exclusion1),
    TreatmentID,
    NA_character_
  ),
  lost_followup = case_when(
    is.na(exclusion1) & TreatmentStatus == "Failed" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Procedure failure",
    is.na(exclusion1) & TreatmentStatus == "No further followup" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Patient Opt-out",
    is.na(exclusion1) & is.na(EligibleAtx12months) ~ "Not eligible for followup"
  ),
  mitt = if_else(
    !is.na(followup) & is.na(lost_followup),
    TreatmentID,
    NA_character_
)
) |> dplyr::rename(
  trialno = "TreatmentID",
  arm3 = "RegistryCohortName"
)

```

```{r}
#| label: fig-strobe
#| fig-cap: "Flowchart of extraction and followup of sample from the Registry"

STROBEPlot1 <- consort_plot(data = STROBEFlow3 |> dplyr::filter(is.na(Joint) | Joint == "Shoulder"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    allocation = "arm3",
                    cex = 0.6
)


STROBEPlot2 <- consort_plot(data = STROBEFlow3 |> dplyr::filter(is.na(Joint) | Joint == "Knee"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    allocation = "arm3",
                    cex = 0.6
)

STROBEPlot3 <- consort_plot(data = STROBEFlow3 |> dplyr::filter(Joint == "Hip"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               # arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    #allocation = "arm3",
                    cex = 0.6
)


knitr::knit_print(STROBEPlot1)
knitr::knit_print(STROBEPlot2)
knitr::knit_print(STROBEPlot3)
```

```{r}
#| label: recruitment-progress


RecordCount <- dplyr::summarise(
  STROBEFlow3,
  Count = n(),
  .by = PatientCreationDate
) |> arrange(
  PatientCreationDate
) |> dplyr::mutate(
  CumulativeCount = cumsum(Count),
  PatientCreationNum = as.numeric(PatientCreationDate)
  ) |> filter(
    !(PatientCreationDate < ymd("20160701"))
  )

cumulative_plot <- ggplot(RecordCount, aes(x = PatientCreationDate, y = CumulativeCount)) +
  geom_line(color = "#2c3e50", size = 1) +
  # Add the spline fit with confidence interval
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), 
              color = "#e74c3c", size = 1.2, se = TRUE, fill = "#e74c3c", alpha = 0.2) +
  geom_point(color = "#3498db", size = 1) +
  # Add labels and title
  labs(
    title = "Cumulative Patient Count Over Time",
    x = "Date",
    y = "Cumulative Number of Patients",
    caption = "Data source: STROBEFlow3"
  ) +
  # Improve the theme and formatting
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    panel.grid.minor = element_blank()
  )

# Print the plot
knitr::knit_print(cumulative_plot)


```

# Cohort Analysis

## Knee Arthritis

```{r}

SnapshotKA <- Snapshot |> dplyr::filter(RegistryCohortName == "KneeArthritis")|> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMKA <- SnapshotKA |> dplyr::select(
  TreatmentID,
  starts_with("OKS"),
  #starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","12months","24months","60months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)

```

```{r}

naniar::gg_miss_var(
  PROMKA |> dplyr::select(
    TimePoint,
    OKSScore
    ), 
  facet = TimePoint,
  show_pct = TRUE
  )

```

```{r}

PROMKA1 <- PROMKA |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(CreationYear = lubridate::year(PatientCreationDate)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop"
  ) |> dplyr::select(
  CreationYear,
  OKSScore
)

gg_miss_fct(PROMKA1, CreationYear)

```

```{r}
#| label: kna-oks
#| fig-cap: "Summary of OKS by Timepoint"

FigureOKS <- PROMKA |>
  ggplot(aes(y = OKSScore, x = TimePoint)) +
  stat_halfeye() + 
   # Add a red ellipse to highlight scores above 42 at Preop
  ggforce::geom_ellipse(aes(x0 = which(levels(PROMKA$TimePoint) == "Preop"), 
                    y0 = 45, 
                    a = 0.3, 
                    b = 5, 
                    angle = 0),
               color = "red", 
               size = 1.2,
               inherit.aes = FALSE) +
  # Add an annotation label
  annotate("text", 
           x = which(levels(PROMKA$TimePoint) == "Preop") + 0.4, 
           y = 48,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Improve the overall appearance
  theme_minimal()


knitr::knit_print(FigureOKS)

```

## General

```{r}
SnapshotGen <- Snapshot |> filter(
  RegistryCohortName == "General"
) |> dplyr::mutate(
  Condition = case_when(
    is.na(InjurySymptomClassification_Preop) ~ NA_character_,
    !is.na(InjurySymptomClassification_Preop) & stringr::str_detect(InjurySymptomClassification_Preop, "injury") ~ "Injury",
    !is.na(InjurySymptomClassification_Preop) & stringr::str_detect(InjurySymptomClassification_Preop, "injury", negate = TRUE) ~ "Chronic"
  )
)
```

```{r}

FigureSMCQ <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = ComorbScore_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureSMCQ)

```

```{r}

FigureEQ5D <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = EQ5D5LScore_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureEQ5D)

```

```{r}

FigureVR12_2 <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = VR12PCS_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureVR12_2)

```

```{r}

FigureSANE <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = SANE_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureSANE)

```

## Tibiofemoral Instability

```{r}
SnapshotTFI <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TFInstability"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMTFI <- SnapshotTFI |> dplyr::select(
  TreatmentID,
  starts_with("IKDC"),
  starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","9months","12months","24months","60months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)

#MasterPROMWORC <- MasterPROM |> filter(TimePoint != "3months")
```

```{r}

naniar::gg_miss_var(
  PROMTFI |> dplyr::select(
    TimePoint,
    IKDCScore
    ), 
  facet = TimePoint,
  show_pct = TRUE
  )
```

```{r}

PROMTFI1 <- PROMTFI |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(
    CreationYear = lubridate::year(PatientCreationDate)
    ) |> dplyr::filter(
      PatientCreationDate > ymd("20160630")
    ),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop"
) |> dplyr::select(
  CreationYear,
  IKDCScore
) 

gg_miss_fct(PROMTFI1, CreationYear)

```

# Current STROBE

```{r}

CurrSTROBE <- Invite |> dplyr::select(
Timestamp,
Timepoint,
FormID,
AppointmentDate,
URN,
DateofBirth,
Sex,
ApptType,
Resource,
AdditionDate
) |> distinct(
  URN,
  .keep_all = TRUE
) |> dplyr::mutate(
  TreatmentID = stringr::str_replace(FormID, "\\.[^\\.]*$", "")
  ) |> dplyr::left_join(
PreReg |> dplyr::select(
  FormID,
  Status
) |> distinct(
  FormID,
  .keep_all = TRUE
) |> dplyr::rename(
  PreRegStatus1 = "Status"
),
by = "FormID"
) |> dplyr::left_join(
PISCF |> dplyr::select(
  FormID,
  RegistryStatus
) |> distinct(
  FormID,
.keep_all = TRUE
) |> dplyr::rename(
  PISCFStatus1 = "RegistryStatus"
),
by = "FormID"
) |> dplyr::left_join(
CAFTable |> dplyr::select(
  TreatmentID,
  ProcessStatus,
  TimepointCAF
) |> dplyr::rename(
  CAFStatus1 = "ProcessStatus"
) |> dplyr::filter(
  TimepointCAF == "Pre_Treatment",
  stringr::str_detect(CAFStatus1,"duplicate", negate = TRUE)
) |> dplyr::select(
  -TimepointCAF
),
by = "TreatmentID"
)

```

Unique values for the invites; repeat CAFs for the same patient (different dates) and then multiple PISCF attempts (
