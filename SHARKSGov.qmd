---
title: "SHARKS_Governance"
author: "Corey Scholes"
affiliation: "EBM Analytics"
version: 3.0
type: "website"
number-sections: true
number-depth: 3
date: "2025-Apr-15"
date-modified: "2025-Jul-04"

bibliography: SHARKSGov references.bib

editor:
  visual
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    
execute: 
  echo: false
  warning: false
  message: false
---

# Preamble

The following analysis is a report on the activity, quality and data contained in the SHARKS registry \[wiki\]

Analysis packages were loaded initially into the *R* environment.

```{r, load-pkgs}

if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Load required packages
  "ggforce",
  "ggdag",
  "ggmap",
  "geosphere",
  "dplyr",
  "flextable",
  "litedown",
  "grateful",
  "modelsummary",
  "quantreg",
  "readr",
  "knitr",
  "cardx",
  "forcats",
  "gargle",
  "googledrive",
  "googlesheets4",
  "openxlsx2",
  "tidyverse",
  "tidymodels",
  "lubridate",
  "consort",
  "gtsummary",
  "survival",
  "ggplot2",
  "ggdist",
  "ggfortify",
  "mice",
  "marginaleffects",
  "naniar",
  "quantreg",
  "broom",
  "epoxy",
  "broom.helpers",
  "stringr"
  )
  
  
```

Access to the SHARKS datasets was pre-authorised.

```{r}
#| label: auth2
#| echo: false

options(
  gargle_oauth_cache = ".secrets",
  gargle_oauth_email = TRUE
)

googledrive::drive_auth(
  cache = ".secrets", 
  email = TRUE
  )
```

A function was generated to retrieve files using the *googledrive* package, to call on later in the analysis for processing data imports.

```{r}

#| label: folder
#| echo: false

base_folder_id1 <- "10PC4-TOygmM55QyC3GDjZ3EiYtO1akFw"


```

```{r}
get_specific_snapshot <- function(folder_name, base_folder_id = base_folder_id1) {
  tryCatch({
    # Check if the folder exists in the base directory
    folder <- googledrive::drive_ls(as_id(base_folder_id), pattern = paste0("^", folder_name, "$"))
    
    if(nrow(folder) == 0) {
      stop(paste("Folder", folder_name, "not found"))
    }
    
    # Find the snapshot file in the specified folder
    snapshot_file <- googledrive::drive_ls(
      folder$id, 
      pattern = "Registry data snapshot\\.xlsx$"
    )
    
    if(nrow(snapshot_file) == 0) {
      stop("No snapshot file found in specified folder")
    }
    
    # Return both pieces of information as a list
    return(list(
      snapshot = snapshot_file,
      folder_name = folder$name
    ))
    
  }, error = function(e) {
    stop(paste("Error finding specified snapshot:", e$message))
  })
}
```

Data was retrieved from live database tables. Source files were specified and stored as global variables to call on in further functions.

```{r}
#| label: live-table
#| echo: false

SheetIDs <- list(
DbSS = "https://docs.google.com/spreadsheets/d/1JPXxLYIlQDzMLCw5mwYKW9al78n7jCCdZEzbk6TUDYo/edit",
PreRegScreen = "https://docs.google.com/spreadsheets/d/1sS2cRYkVaoXzE5Lnm5gn78d5en4cX35B-kLXHaok-J8/edit",
PICSFResp = "https://docs.google.com/spreadsheets/d/1HOhXbZtyVLxt_CBv91b3lr9WWbQvPFcL0VYM0m-wuNI/edit",
ClinicAssess = "https://docs.google.com/spreadsheets/d/1RtsPLxxz4dWqp9LEz7z_5cusxZ9r2EnlnwhATM3rv7Y/edit",
AdminForm = "https://docs.google.com/spreadsheets/d/12TeTNGMfu0Z_ebFu4TxOpyJbGWCG9UsIM_SaEma95F0/edit",
ACAF = "https://docs.google.com/spreadsheets/d/1g2vlbICJwKE-vyABhxeTk2jZjr_lKc9qe0DnIPbWJ04/edit",
ConsultList = "https://docs.google.com/spreadsheets/d/1eKz-qgNoDNhw-Zyf44wH8wU32Q7BMgkF7zBQ8aPYP-c/edit"
)

# Treatments Masterlist - Timestamp is > Registry Start date (gsuite)

```

```{r}
#| label: read-tables

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())



ComplicTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "Complications", 
  col_names = TRUE, 
  col_types = "cccTliicicccccccccccccccccDccD"
  )


#To match to acctData
PatientTable <- googlesheets4::range_read(
  ss = SheetIDs$DbSS,
  sheet = "Patient", 
  range = "A10:P",
  col_names = FALSE, 
  col_types = "DccccDcccDccicci"
  )


Patient_Col <- c(
  "PatientCreationDate",
  "PatientID",
  "LastName",	
  "FirstName",	
  "AlternateID",	
  "DateOfBirth",	
  "Sex",	
  "RegistryStatus",	
  "RegistryStatusNotes",	
  "DateRegistryStatus",	
  "NotificationMethod",	
  "ConsentStatus",
  "NoTreatmentRECORDs",	
  "Email",	
  "Phone",
  "TrueNoTreatments"
)

colnames(PatientTable) <- Patient_Col


# Top end of STROBE
# 
# 

Invite <- googlesheets4::range_read(
  ss = SheetIDs$ConsultList,
  sheet = "MessageMediaLog", 
  range = "A8:U", #Drop test entries
  col_names = FALSE, 
  col_types = "TiccDcccccccccDcccD?c"
  )


Invite_Col <- c(
  "Timestamp",	
  "CohortID",	
  "Timepoint",	
  "FormID",
  "AppointmentDate",
  "URN",
  "ApptType",
  "LastName",
  "FirstName",
  "PostCode",
  "Phone",
  "DestPhone",
  "MessageID",
  "MessageStatus",
  "DateofBirth",
  "Sex",
  "Resource",
  "ProcedureName",
  "AdditionDate",
  "PROMsLink",
  "Contents"

)

colnames(Invite) <- Invite_Col




PreReg <- googlesheets4::range_read(
  ss = SheetIDs$PreRegScreen,
  sheet = "SHARKS - Pre-registry Screening_RawData", 
  range = "A8:BD", #Drop test entries
  col_names = FALSE, 
  col_types = "cccTliiccccccccccccccccccccccccccccccccccccccccccccccccc"
  )

PreReg_Col <- c(
  "ResponseID",
  "ResponseStatus",
  "IPAddress",	
  "Timestamp",	
  "Duplicate",	
  "TimeComplete",	
  "SeqNo",	
  "ExternalRef",	
  "CohortID",	
  "Timepoint",	
  "FormID",	
  "CustomVar",
  "RegistryConsent",	
  "RespEmail",	
  "EmailList",
  "CountryCode",
  "Region",	
  "Country",
  "Long",	
  "Lat",	
  "Radius",
  "Browser",
  "Device",	
  "OperatingSystem",	
  "Language", 
  "MessText",
  "AppointmentReas",	
  "FollowupVisit",	
  "LeftShoulder",	
  "RightShoulder",	
  "LeftHandWristElbow",	
  "RightHandWristElbow",	
  "LeftHip",	
  "RightHip",	
  "LeftKnee",	
  "RightKnee",	
  "LeftFootAnkleLegBelowKnee",	
  "RightFootAnkleLegBelowKnee",	
  "LeftSomethingElse",	
  "RightSomethingElse",	
  "ShoulderArthritis",	
  "ShoulderPreviousJointReplacement",	
  "ShoulderBrokenBone",	
  "ShoulderOtherInjury",	
  "ShoulderNotSure",	
  "HipArthritis",	
  "HipPreviousJointReplacement",	
  "HipBrokenBone",	
  "HipOtherInjury",	
  "HipNotSure",	
  "KneeArthritis",	
  "KneePreviousJointReplacement",	
  "KneeBrokenBone",	
  "KneeOtherInjury",	
  "KneeNotSure",	
  "Status"
)

colnames(PreReg) <- PreReg_Col


PISCF <- googlesheets4::range_read(
  ss = SheetIDs$PICSFResp,
  sheet = "SHARKS - PISCF_RawData", 
  range = "A8:AN", #Drop test entries
  col_names = FALSE, 
  col_types = "cccTliiciccccccccccccccccccccccccccc?ccc"
  )

PISCF_Col <- c(
  "ResponseID",
  "ResponseStatus",
  "IPAddress",	
  "Timestamp",	
  "Duplicate",	
  "TimeComplete",	
  "SeqNo",	
  "ExternalRef",	
  "CohortID",	
  "Timepoint",	
  "FormID",	
  "CustomVar",
  "RegistryConsent",	
  "RespEmail",	
  "EmailList",
  "CountryCode",
  "Region",	
  "Country",
  "Long",	
  "Lat",	
  "Radius",
  "Browser",
  "Device",	
  "OperatingSystem",	
  "Language", 
  "MessText",
  "PISCF1",
  "PISCF2",
  "ConsentState",
  "CheckBox1",
  "Checkbox2",
  "Checkbox3",
  "Checkbox4",
  "Checkbox5",
  "Name",
  "RepName",
  "Signature",
  "SendRep",
  "RegistryStatus",
  "ReportStatus"
)

colnames(PISCF) <- PISCF_Col

ConsultCount <- googlesheets4::range_read(
  ss = SheetIDs$ConsultList,
  sheet = "CountLogs", 
  range = "A5:R", #Drop test entries
  col_names = FALSE, 
  col_types = "Dnnnnnnnnnnnnnnnnn"
  )


Consult_Col <- googlesheets4::range_read(
  ss = SheetIDs$ConsultList,
  sheet = "CountLogs", 
  range = "A1:AN1"
  )

colnames(ConsultCount) <- colnames(Consult_Col)


CAFTable <- googlesheets4::range_read(
  ss = SheetIDs$ClinicAssess,
  sheet = "SHARKS - Clinic Assessment Form_RawData", 
  range = "A2:BH",
  col_names = TRUE, 
  col_types = "ccccliiciccccccccccccccccccccnnnnnnnnnnnncccciinnnnccccccccc"
  )

```

```{r}

AdminTable <- googlesheets4::range_read(
  ss = SheetIDs$AdminForm,
  sheet = "SHARKS - Admin_RawData", 
  range = "A3:AK",
  col_names = TRUE, 
  col_types = "cccTlnicccccccccccccccccccccccccccccT"
  )

ACAF <- googlesheets4::range_read(
  ss = SheetIDs$ACAF,
  sheet = "SHARKS - Admin Clinic Assessment Form_RawData", 
  range = "A3:BQ",
  col_names = TRUE, 
  col_types = "cccTlnicccccccccccccccccccccccccccccccnnnnnnnnncciicciiiiiicccccccccc"
  )


```

A static registry snapshot was retrieved and formatted based on the fixed date of preparation of the snapshot (30-Jun-2025).

```{r}

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())

# To get a snapshot from a specific folder (e.g., "20230415")
specific_snapshot <- get_specific_snapshot("20250630")


```

```{r}

temp_file1 <- tempfile(fileext = ".xlsx")
drive_download(
  file = specific_snapshot$snapshot$id,
  path = temp_file1,
  overwrite = TRUE
)

# Correction to reset back to excel origin
DaysDiff <- as.numeric(as.duration(interval(ymd("1899-12-30"), ymd("1970-01-01"))),"days")


Snapshot <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Combined",
  colNames = TRUE,
  detectDates = TRUE
  ) |> mutate(
    URN = stringr::str_split_i(TreatmentID,"\\.",1)
  ) |> unite(
  col = "CombID",
  sep = ".",
  c("URN","AffectedSide"),
  remove = FALSE
)

STROBEInput <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Strobe_Input",
  colNames = TRUE,
  detectDates = TRUE
  )

```

# Context

Engagement to design and implement a department registry at QEII Hospital commenced in 2016 as a private-public partnership between the Department and EBM Analytics. The registry launched as a single-surgeon pilot in July 2017 within the Department of Orthopaedics, with Chris Bell as the Principal Investigator. At commencement, a series of shoulder and knee cohorts were designed and implemented that reflected the practice of the project PI. In brief, the recruitment and data collection processes were based largely on paper (initial consent and questionnaire pack) and followup scores completed by paper or, in a minority of cases, electronic capture through web-based forms.

In June 2019 the registry was expanded to the current cohort structure, with a *hip arthroplasty* and additional knee cohort added (*Knee Deformity)*, as well as contributions from other consultants in the Department (N = 4 in total). At this time, Lorenzo Calabro took over operational direction of the Department research activities and the newly renamed SHARKS (Shoulder, Hip Arthroplasty and Knee Surgery) Registry. A [wiki](https://sites.google.com/ebma.com.au/sharksregistry/home) was commissioned (referred to from here as Version 1) to document the registry and associated activities. At around this time, a paper was published describing the initial implementation and quality results.

::: border
Lee, B., Ebrahimi, M., Ektas, N., Ting, C. H., Cowley, M., Scholes, C., & Bell, C. (2020). Implementation and quality assessment of a clinical orthopaedic registry in a public hospital department. BMC Health Services Research, 20(1), 393.
:::

Restrictions on theatre lists and in-person clinics began from \~April 2020 with the declaration of a state public health emergency in January 2020 due to the COVID-19 pandemic, with rolling lockdowns and restrictions continuing into 2023. Throughout this period, followup analyses of registry data was conducted, with efforts to recruit new patients and followup scores by phone. Planning for the second iteration (Version 2) of the Registry commenced in 2021, with a major amendment to the HREC approvals submitted October 2021.

Version 2 of the SHARKS registry moved all recruitment and data collection processes to an electronic platform, including opt-in patient consent. It also included coverage for all eligible cases within the Department and lifted restrictions for recruitment and monitoring. Patient communication was consolidated to sms and a website interface provided for staff data collection in clinics and theatres. Approval for final implementation of the system, and the ongoing support contract was provided in May 2024, with initial rollout in August 2024 and full rollout to all Department activities in October 2024. A [wiki for Version 2](https://sites.google.com/ebma.com.au/sharksv2-registry-wiki/home) of the Registry was also commissioned in 2024.

# Engagement

The current iteration of the SHARKS registry commenced in August 2024.

```{r}

CurrSTROBE <- Invite |> dplyr::select(
Timestamp,
Timepoint,
FormID,
AppointmentDate,
URN,
DateofBirth,
Sex,
ApptType,
Resource,
AdditionDate
) |> distinct(
  URN,
  .keep_all = TRUE
) |> dplyr::mutate(
  TreatmentID = stringr::str_replace(FormID, "\\.[^\\.]*$", "")
  ) |> dplyr::left_join(
PreReg |> dplyr::select(
  FormID,
  Status
) |> distinct(
  FormID,
  .keep_all = TRUE
) |> dplyr::rename(
  PreRegStatus1 = "Status"
),
by = "FormID"
) |> dplyr::left_join(
PISCF |> dplyr::select(
  FormID,
  RegistryStatus
) |> distinct(
  FormID,
.keep_all = TRUE
) |> dplyr::rename(
  PISCFStatus1 = "RegistryStatus"
),
by = "FormID"
) |> dplyr::left_join(
  AdminTable |> dplyr::select(
    TreatmentID,
    ProcessStatus
  ) |> dplyr::filter(
    stringr::str_detect(ProcessStatus,"Duplicate", negate = TRUE)
),
by = "TreatmentID"
) |> dplyr::rename(
  AdminStatus1 = "ProcessStatus"
) |> dplyr::left_join(
CAFTable |> dplyr::select(
  TreatmentID,
  ProcessStatus,
  TimepointCAF
) |> dplyr::rename(
  CAFStatus1 = "ProcessStatus"
) |> dplyr::filter(
  TimepointCAF == "Pre_Treatment",
  stringr::str_detect(CAFStatus1,"Duplicate", negate = TRUE)
) |> dplyr::select(
  -TimepointCAF
),
by = "TreatmentID"
) |> dplyr::left_join( # need to standardise to treatmentID for those missing (create from URN + ".1"); existing treatment
  # for existing treatment not current treatment for which that 9999999-URN with a .1 for treatmentid and another .1 for formid
ACAF |> dplyr::select(
  URN,
  ProcessStatus
) |> dplyr::rename(
  ACAFStatus1 = "ProcessStatus"
) |> dplyr::filter(
  stringr::str_detect(ACAFStatus1,"Duplicate", negate = TRUE)
),
by = "URN"
)

```

```{r}
InviteN <- nrow(CurrSTROBE)
PreRegN <- nrow(CurrSTROBE |> dplyr::filter(!is.na(PreRegStatus1)))
PreRegPerc <- round((PreRegN/InviteN)*100,1)
ScreenInN <- nrow(CurrSTROBE |> dplyr::filter(stringr::str_detect(PreRegStatus1,"PISCF")))
ScreenInPerc <- round((ScreenInN/PreRegN)*100,1)
PISCFN <- nrow(CurrSTROBE |> dplyr::filter(
  stringr::str_detect(PreRegStatus1,"PISCF"),
  !is.na(PISCFStatus1)
  )
)
PISCFPerc <- round((PISCFN/ScreenInN)*100,1)


```

*Do patients engage with attempts to recruit them prior to initial clinic consults?*

```{epoxy}

Since commencement of SHARKSv2, the system has attempted to recruit {InviteN} individuals in the Registry with sms. Of those, {PreRegN} engaged with the link provided and attempted to screen themselves into the Registry, an engagement rate of {PreRegPerc}%.

Of those engaging with the invitation, {ScreenInPerc}% screened themselves to the consent form (N = {ScreenInN}), but only {PISCFPerc}% of this subgroup (N = {PISCFN}) provided consent to participate.

```

```{r}

CurrSTROBE_AF1 <- CurrSTROBE |> dplyr::filter(
  !is.na(PISCFStatus1)
  ) |> mutate(
    AdminStatus2 = if_else(
      is.na(AdminStatus1),
      "Not Actioned",
      AdminStatus1
    )
  )


CurrSTROBE_AF2 <- CurrSTROBE |> dplyr::filter(
  !is.na(AdminStatus1)
  ) |> mutate(
    CAFStatus2 = if_else(
      is.na(AdminStatus1) & !is.na(PISCFStatus1),
      "Not Actioned",
      AdminStatus1
    )
  )

```

*Do Department staff engage with the registry interface?*

::: {#fig-traffic}
![](Website Traffic June 2025.png)

SHARKSRegistry.com traffic Nov 2024 - Jun 2025
:::

*Do Department staff engage with records of new patients flagged on consult lists?*

```{r}

Table1 <- gtsummary::tbl_cross( # For inline text retrieval in epoxy)
  CurrSTROBE_AF1,
  row = PISCFStatus1,
  col = AdminStatus2
)

NewMissed <- as.numeric(gtsummary::inline_text(Table1, row_level = "Patient added to database", col_level = "Not Actioned"))
NewTotal <- as.numeric(gtsummary::inline_text(Table1, row_level = "Patient added to database", col_level = "stat_0"))

ClinicAdminN <- nrow(AdminTable |> dplyr::filter(
  !(TreatmentID %in% CurrSTROBE$TreatmentID),
  stringr::str_detect(ProcessStatus,"Duplicate", negate = TRUE),
  stringr::str_detect(ConsultationOutcome,"Surgery", negate = TRUE)
))

SumReturnN <- sum(ConsultCount$`Existing treatment records`, na.rm = TRUE) - round(sum(ConsultCount$`Existing treatment records`, na.rm = TRUE)*0.4,0)

SurgeryN <- Snapshot |> dplyr::filter(
  DateTreatment > ymd("20240820")
)

SurgeryDataN <- nrow(
  SurgeryN |> dplyr::filter(
    !is.na(Procedure)
  )
)

ACAFN <- nrow(CurrSTROBE |> dplyr::filter(
  (is.na(PreRegStatus1) | is.na(PISCFStatus1)),
  !is.na(ACAFStatus1),
  stringr::str_detect(ACAFStatus1,"(Records added)")
))

```

```{r}
SnapshotGen <- Snapshot |> filter(
  RegistryCohortName == "General"
) |> dplyr::mutate(
  Condition = case_when(
    is.na(InjurySymptomClassification_Preop) ~ NA_character_,
    !is.na(InjurySymptomClassification_Preop) & stringr::str_detect(InjurySymptomClassification_Preop, "injury") ~ "Injury",
    !is.na(InjurySymptomClassification_Preop) & stringr::str_detect(InjurySymptomClassification_Preop, "injury", negate = TRUE) ~ "Chronic"
  )
)
```

```{epoxy}


The rate of newly added records not actioned in clinic is extremely high (N = {NewMissed - ACAFN}), which is a {100 - round(((NewMissed - ACAFN)/NewTotal)*100,1)}% engagement rate with newly added records.

The number of clinic forms for returning patients is also low (N = {ClinicAdminN}) relative to the number of returning records with clinic appointmentss (N = {SumReturnN}).

The rate of returned intraoperative forms is also low, with {SurgeryDataN} forms returned from {nrow(SurgeryN)} scheduled cases ({round((SurgeryDataN/nrow(SurgeryN))*100,1)}%) performed since implementation of SHARKSv2.

In addition, there are {nrow(SnapshotGen)} cases that remain in the General cohort and have not been recategorised based on clinic input.
```

# Recruitment Flow by Region

Flowcharts as per STROBE [@Vandenbroucke2007] and RECORD [@Benchimol2015] guidelines were generated for each region (shoulder, hip, knee) enrolled into the Registry. Followup was set to eligibility at 12months.

```{r}

STROBEFlow2 <- STROBEInput |> 
  # Filter out rows with missing TreatmentID
  dplyr::filter(!is.na(TreatmentID)) |> 
  # Join with relevant columns from Snapshot
  dplyr::left_join(
    Snapshot |> 
      dplyr::select(
        TreatmentID,
        CombID,
        DateInitialExamination,
        EligibleAtPreop,
        EligibleAtx12months
      ) |> 
      # Convert all date columns to date format
      dplyr::mutate(
        across(contains("Date"), lubridate::ymd)
      ),
    # Explicitly specify join column
    by = "TreatmentID"
  )

```

```{r}

CurrentDate <- as.character("20250331")

STROBEFlow3 <- STROBEFlow2 |> dplyr::mutate(
  Joint = case_when(
    stringr::str_detect(RegistryCohortName,"(GH)|^R") ~ "Shoulder",
    stringr::str_detect(RegistryCohortName,"^K|^T") ~ "Knee",
    stringr::str_detect(RegistryCohortName,"^H") ~ "Hip",
  ),
  exclusion1 = case_when(
    is.na(SurgicalTreatment) ~ "Not a surgical treatment",
    SurgicalTreatment == "Surgical" & stringr::str_detect(RegistryStatus,"Opt-out") ~ "Patient Opt-Out",
    SurgicalTreatment == "Surgical" & is.na(RegistryCohortName) ~ "No cohort",
    SurgicalTreatment == "Surgical" ~ NA_character_,
    .default = "Not a surgical treatment"
  ),
  followup = if_else(
    is.na(exclusion1),
    TreatmentID,
    NA_character_
  ),
  lost_followup = case_when(
    is.na(exclusion1) & TreatmentStatus == "Failed" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Procedure failure",
    is.na(exclusion1) & TreatmentStatus == "No further followup" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Patient Opt-out",
    is.na(exclusion1) & is.na(EligibleAtx12months) ~ "Not eligible for followup"
  ),
  mitt = if_else(
    !is.na(followup) & is.na(lost_followup),
    TreatmentID,
    NA_character_
)
) |> dplyr::rename(
  trialno = "TreatmentID",
  arm3 = "Joint"
)


STROBEFlow3a <- STROBEFlow3 |> dplyr::rename(
  Joint = "arm3"
) |> dplyr::rename(
  arm3 = "RegistryCohortName"
)

```

```{r}
#| label: fig-strobe-joint
#| fig-cap: "Flowchart of extraction and followup of sample from the Registry - Allocation by Joint"


STROBEPlotMain <- consort_plot(
  data = STROBEFlow3,
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Joint",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlotMain)

```

```{r}
#| label: fig-strobe-shoulder
#| fig-cap: "Flowchart of extraction and followup of sample from the Registry - Shoulder"

STROBEPlot1 <- consort_plot(data = STROBEFlow3a |> dplyr::filter(Joint == "Shoulder"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    allocation = "arm3",
                    cex = 0.6
)

knitr::knit_print(STROBEPlot1)
```

```{r}
#| label: fig-strobe-knee
#| fig-cap: "Flowchart of extraction and followup of sample from the Registry - Knee"

STROBEPlot2 <- consort_plot(data = STROBEFlow3a |> dplyr::filter(Joint == "Knee"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    allocation = "arm3",
                    cex = 0.6
)
knitr::knit_print(STROBEPlot2)

```

```{r}
#| label: fig-strobe-hip
#| fig-cap: "Flowchart of extraction and followup of sample from the Registry - Hip"

STROBEPlot3 <- consort_plot(data = STROBEFlow3a |> dplyr::filter(Joint == "Hip"),
                    orders = c(trialno = "Population",
                               exclusion1 = "Ineligible",
                               trialno = "Baseline Analysis",
                               # arm3 = "Cohort",
                               lost_followup = "Excluded",
                               mitt = "Followup Analysis"
                    ),
                    side_box = c(
                      "exclusion1",
                      "lost_followup"
                    ),
                    #allocation = "arm3",
                    cex = 0.6
)

knitr::knit_print(STROBEPlot3)
```

Cumulative recruitment over time was plotted from Registry inception to the present.

```{r}
#| label: fig-progress
#| fig-cap: "Cumulative record creation within SHARKS from inception to present"


RecordCount <- dplyr::summarise(
  STROBEFlow3,
  Count = n(),
  .by = PatientCreationDate
) |> arrange(
  PatientCreationDate
) |> dplyr::mutate(
  CumulativeCount = cumsum(Count),
  PatientCreationNum = as.numeric(PatientCreationDate)
  ) |> filter(
    !(PatientCreationDate < ymd("20160701"))
  )

cumulative_plot <- ggplot(RecordCount, aes(x = PatientCreationDate, y = CumulativeCount)) +
  geom_line(color = "#2c3e50", size = 1) +
  # Add the spline fit with confidence interval
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), 
              color = "#e74c3c", size = 1.2, se = TRUE, fill = "#e74c3c", alpha = 0.2) +
  geom_point(color = "#3498db", size = 1) +
  # Add labels and title
  labs(
    title = "Cumulative Patient Count Over Time",
    x = "Date",
    y = "Cumulative Number of Patients",
    #caption = "Data source: STROBEFlow3"
  ) +
  # Improve the theme and formatting
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    panel.grid.minor = element_blank()
  )

# Print the plot
knitr::knit_print(cumulative_plot)


```

An acceleration can be observed in @fig-progress where SHARKSv2 was implemented at the end of 2024

# Missingness and Compliance

## Baseline and Intraoperative

```{r}
#| label: fig-baseline-miss
#| fig-cap: "Missingness of baseline PROMs and intraoperative date by registry cohort"

gg_miss_fct(Snapshot |> dplyr::filter(
      EligibleAtPreop == "Yes" | EligibleAtIntraop == "Yes"
      ) |> dplyr::select(
        VR12PCS_Preop,
        Procedure,
        TreatmentProvider, 
        RegistryCohortName
        ), 
      RegistryCohortName
      )


```

Missingness for baseline PROMs (represented by VR12) and intraoperative data is captured in @fig-baseline-miss. Intraoperative data was captured slightly differently between cohorts in the previous system, so multiple fields have been utilised to illustrate intraoperative capture across cohorts.

Overall, there are variable response rates for baseline scores across cohorts. This may reflect variable engagement during consultant clinics. The poor compliance for KneeDeformity cases reflects a potential issue for enrolling patients with KneeArthritis more broadly. Historically, emphasis has been made on enrolling total joints into the registry, however in reality KneeDeformity cases are more like other non-arthroplasty cases of KneeArthritis, which may be overlooked in clinic.

## Patient-reported Outcomes by TimePoint

```{r}
min_percent <- 10
max_percent <- 100  # Or another value that encompasses all your data
```

```{r}
#| label: fig-kneearthritis-miss
#| fig-cap: "Missingness of Oxford Knee Score by Timepoint in the Knee Arthritis cohort"

SnapshotKA <- Snapshot |> dplyr::filter(RegistryCohortName == "KneeArthritis")|> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMKA <- SnapshotKA |> dplyr::select(
  TreatmentID,
  starts_with("OKS"),
  #starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","12months","24months","60months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)



gg_miss_fct(PROMKA |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-hiparthro-miss
#| fig-cap: "Missingness of Oxford Hip Score by Timepoint in the Hip Arthroplasty cohort"

SnapshotHA <- Snapshot |> dplyr::filter(RegistryCohortName == "HipArthroplasty")|> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMHA <- SnapshotHA |> dplyr::select(
  TreatmentID,
  starts_with("OHS"),
  #starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","12months","24months","60months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)



gg_miss_fct(PROMHA |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-tfi-miss
#| fig-cap: "Missingness of IKDC2000 Score by Timepoint in the Tibiofemoral Instability cohort"


SnapshotTFI <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TFInstability"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMTFI <- SnapshotTFI |> dplyr::select(
  TreatmentID,
  starts_with("IKDC"),
  starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","9months","12months","24months","60months"), ordered = TRUE, exclude = NA),
  IKDCScore = as.numeric(IKDCScore)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)

#MasterPROMWORC <- MasterPROM |> filter(TimePoint != "3months")



gg_miss_fct(PROMTFI |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-ghi-miss
#| fig-cap: "Missingness of Oxford Shoulder Instability Score by Timepoint in the Glenohumeral Instability cohort"


SnapshotGHI <- Snapshot |> dplyr::filter(
  RegistryCohortName == "GHInstability"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMGHI <- SnapshotGHI |> dplyr::select(
  TreatmentID,
  starts_with("OSIS"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","9months","12months","24months","60months"), ordered = TRUE, exclude = NA),
  OSISScore = as.numeric(OSISScore)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
)

#MasterPROMWORC <- MasterPROM |> filter(TimePoint != "3months")



gg_miss_fct(PROMGHI |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

The cumulative results of the Registry illustrate difficulty in engaging patients beyond short term followup. The Tibiofemoral Instability cohort (@fig-tfi-miss) bucks this trend at 12months followup, largely due to previous work to this cohort using phone calls. The 9-month followup has only recently been implemented as part of SHARKSv2 and auditing rules will be adjusted in future audits to reflect varied eligibility criteria for this timepoint.

## Baseline by Year

```{r}
#| label: fig-ka-missbase
#| fig-cap: "Missingness of Baseline Oxford Knee Score by Year in the Knee Arthritis cohort"


PROMKA1 <- PROMKA |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(CreationYear = lubridate::year(PatientCreationDate)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop"
  ) |> dplyr::select(
  CreationYear,
  OKSScore
)

gg_miss_fct(PROMKA1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

```{r}
#| label: fig-ha-missbase
#| fig-cap: "Missingness of Baseline Oxford Hip Score by Year in the Hip Arthroplasty cohort"


PROMHA1 <- PROMHA |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(CreationYear = lubridate::year(PatientCreationDate)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop",
  !(CreationYear < 2018)
  ) |> dplyr::select(
  CreationYear,
  OHSScore
)

gg_miss_fct(PROMHA1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

```{r}
#| label: fig-tfi-missbase
#| fig-cap: "Missingness of Baseline IKDC2000 by Year in the Tibiofemoral Instability cohort"


PROMTFI1 <- PROMTFI |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(CreationYear = lubridate::year(PatientCreationDate)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop",
  !(CreationYear < 2017)
  ) |> dplyr::select(
  CreationYear,
  IKDCScore
)

gg_miss_fct(PROMTFI1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

```{r}
#| label: fig-ghi-missbase
#| fig-cap: "Missingness of Baseline Oxford Shoulder Instability Score by Year in the Glenohumeral Instability cohort"


PROMGHI1 <- PROMGHI |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    PatientCreationDate
  ) |> dplyr::mutate(CreationYear = lubridate::year(PatientCreationDate)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop",
  !(CreationYear < 2017)
  ) |> dplyr::select(
  CreationYear,
  OSISScore
)

gg_miss_fct(PROMGHI1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

The introduction of SHARKSv2 has begun to improve the baseline capture of cohort-specific scores in the *KneeArthritis* cohort (@fig-ka-missbase), as well as the *HipArthroplasty* (@fig-ha-missbase)and *GHInstability* (@fig-ghi-missbase) cohorts. However, because the system now separates the questionnaires between the *General* pack that patients receive prior to their initial clinic appointment and the cohort-specific questionnaire (e.g. IKDC), the short turnaround for *TFInstability* surgeries is degrading the capture rate for baseline IKDC in this cohort. This is illustrated by the increased missingness in baseline IKDC (@fig-tfi-missbase). It is speculated that Knee Stabilisation cases appearing on the theatre list are being recategorised in the correct cohort too late for PROMs capture.

In the new system, patients receiving a surgery booking will need to be reminded that they will receive an additional questionnaire that is more specific to their condition prior to their surgery.

# Cohort Analysis

The VR12 is a *general* health questionnaire that is presented to *all* patients enrolled in the registry.

```{r}
#| label: fig-vr12pcs-cohort
#| fig-cap: "Summary of VR12-PCS at baseline by cohort"

FigureVR12PCS <- Snapshot |> dplyr::filter(RegistryCohortName != "KneeDeformity") |>
  ggplot(aes(y = RegistryCohortName, x = VR12PCS_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12PCS)

```

```{r}
#| label: fig-vr12mcs-cohort
#| fig-cap: "Summary of VR12-MCS at baseline by cohort"

FigureVR12MCS <- Snapshot |> dplyr::filter(RegistryCohortName != "KneeDeformity") |>
  ggplot(aes(y = RegistryCohortName, x = VR12MCS_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12MCS)
```

Between-cohort variability is observed for the Physical Component Score of the VR12, but not as pronounced for the Mental Component Score. Most notable is the high variation within all cohorts for both VR12 component scores.

## General

The general cohort is a label for all patients entering into the registry through the invitation link sent prior to their initial clinic appointment.

```{r}
#| label: fig-smcq
#| fig-cap: "Summary of Self-reported Medical Comorbidity Questionnaire at baseline by condition type"


FigureSMCQ <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = ComorbScore_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureSMCQ)

```

```{r}
#| label: fig-eq5d
#| fig-cap: "Summary of EQ5D5L at baseline by condition type"

FigureEQ5D <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = EQ5D5LScore_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureEQ5D)

```

```{r}
#| label: fig-vr12-gen
#| fig-cap: "Summary of VR12-PCS at baseline by condition type"

FigureVR12_2 <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = VR12PCS_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureVR12_2)

```

```{r}
#| label: fig-sane-gen
#| fig-cap: "Summary of SANE at baseline by condition type"

FigureSANE <- SnapshotGen |> dplyr::filter(
  !is.na(Condition)
) |>
  ggplot(aes(y = Condition, x = SANE_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureSANE)

```

The *General* cohort captures broad health questionnaires at the point of Registry enrolment and these show some differences between patient-identified conditions. The evaluation of joint function (SANE) shows high variability, regardless of the condition type.

## Knee Arthritis

```{r}
#| label: fig-oks-ka
#| fig-cap: "Summary of OKS by Timepoint"

preop_position <- which(levels(PROMKA$TimePoint) == "Preop")

FigureOKS <- PROMKA |>
  ggplot(aes(y = OKSScore, x = TimePoint)) +
  stat_halfeye(na.rm = TRUE) + 
  ggforce::geom_ellipse(aes(x0 = preop_position, 
                    y0 = 42, 
                    a = 0.3, 
                    b = 5, 
                    angle = 0),
               color = "red", 
               size = 1.2,
               inherit.aes = FALSE) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 48,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  theme_minimal()

knitr::knit_print(FigureOKS)

```

```{r}
#| label: tbl-ka-intraop
#| tbl-cap: "Summary of intraoperative variables in Knee Arthritis cohort"

TableKAsurg <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "KneeArthritis"
  ) |> dplyr::select(
    TourniquetUse:AlignmentReference
  ) |> dplyr::select(
    -(contains("Graft")),
    -(contains("Duration"))
  ),
  missing = "no"
)

knitr::knit_print(TableKAsurg)


```

Assessment of the *KneeArthritis* cohort reveals that some patients enrolled in the cohort are scoring high on the Oxford Knee Score and that intraoperative data requires backfilling and that there may be sufficient variation in surgical technique to warrant further investigation (e.g. patellar resurfacing, tourniquet use, soft tissue management).

## Tibiofemoral Instability

```{r}
#| label: fig-ikdc-tfi
#| fig-cap: "Summary of IKDC2000 by Timepoint"

preop_position <- which(levels(PROMTFI$TimePoint) == "Preop")

FigureIKDC <- PROMTFI |>
  ggplot(aes(y = IKDCScore, x = TimePoint)) +
  stat_halfeye(na.rm = TRUE) + 
   # Add a red ellipse to highlight scores above 42 at Preop
  ggforce::geom_ellipse(aes(x0 = preop_position, 
                    y0 = 80, 
                    a = 0.3, 
                    b = 5, 
                    angle = 0),
               color = "red", 
               size = 1.2,
               inherit.aes = FALSE) +
  # Add an annotation label
  annotate("text", 
           x = preop_position + 0.4, 
           y = 90,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Improve the overall appearance
  theme_minimal()


knitr::knit_print(FigureIKDC)

```

Overall, the *TFInstability* cohort mean IKDC score does not reach the reported patient acceptable symptom state (\~ 80) on average at up to 2 years followup. Considering the missingness patterns in the data, this could be attributed to patients self-selecting into responding to PROMs or the patients returning to clinic historically to fill in scores have been those having problems after surgery.

```{r}

IKDCBase <- dplyr::summarise(
SnapshotTFI |> dplyr::filter(
  !is.na(IKDCScore_Preop)
) ,
(mean = mean(as.numeric(IKDCScore_Preop))
 )
)

```

```{epoxy}

The baseline IKDC for ACL injury patients is {round(IKDCBase,2)}.


```

```{r}

tblIKDCBase <- tbl_summary(
  SnapshotTFI |> dplyr::mutate(
  IKDCBase = as.numeric(IKDCScore_Preop)
) |> dplyr::filter(
  Sex == "Male" | Sex == "Female"
  ) |> select(
    IKDCBase,
    Sex,
    AgeAtInitialExam
  ),
  by = Sex,
statistic = list(
  all_continuous() ~ "{mean} ({sd})"
),
digits = list(
  IKDCBase = c(1, 1),
  AgeAtInitialExam = c(1, 1)
  ),
missing = "ifany"
) |> add_overall()

knitr::knit_print(tblIKDCBase)

```

## Hip Arthroplasty

```{r}
#| label: fig-ohs-ha
#| fig-cap: "Summary of OHS by Timepoint"

FigureOHS <- PROMHA |>
  ggplot(aes(y = OHSScore, x = TimePoint)) +
  stat_halfeye()  +
  # Improve the overall appearance
  theme_minimal()


knitr::knit_print(FigureOHS)

```

## Glenohumeral Instability

```{r}
#| label: fig-osis-ghi
#| fig-cap: "Summary of OSIS by Timepoint"

preop_position <- which(levels(PROMGHI$TimePoint) == "Preop")

FigureOSIS <- PROMGHI |>
  ggplot(aes(y = OSISScore, x = TimePoint)) +
  stat_halfeye() + 
   # Add a red ellipse to highlight scores above 42 at Preop
  ggforce::geom_ellipse(aes(x0 = which(levels(PROMGHI$TimePoint) == "Preop"), 
                    y0 = 42, 
                    a = 0.3, 
                    b = 5, 
                    angle = 0),
               color = "red", 
               size = 1.2,
               inherit.aes = FALSE) +
  # Add an annotation label
  annotate("text", 
           x = which(levels(PROMGHI$TimePoint) == "Preop") + 0.4, 
           y = 48,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Improve the overall appearance
  theme_minimal()


knitr::knit_print(FigureOSIS)

```

## Satisfaction

```{r}
#| label: tbl-satisfaction
#| tbl-cap: "Satisfaction likert responses for arthroplasty cohorts"

Satisfaction <- Snapshot |> dplyr::select(
  RegistryCohortName,
  TreatmentSatisfaction_12months,
  EligibleAtx12months
) |> dplyr::filter(
  RegistryCohortName == "KneeArthritis" | RegistryCohortName == "HipArthroplasty" | RegistryCohortName == "GHArthritis",
  EligibleAtx12months == "Yes"
)

tbl_summary(
  Satisfaction |> dplyr::select(-EligibleAtx12months),
  by = RegistryCohortName
)

```

The satisfaction scores were incorporated into SHARKSv2, but have not been available historically as part of the SHARKS configuration in the previous platform.

# Interpretation

The poor followup can be attributed to the slow rollout of automatic followup of the registry system for records created prior to the introduction of SHARKSv2 - these have been set to *inactive* to ensure thorough testing of the system prior to contacting patients that have not been engaged with the hospital for some years. Records meeting these criteria have only been set to *active* as they have returned to clinic since the rollout. In the last week, all of these records have been sent PROMs links and reminders to enable scheduled followup.

The reduction in compliance for TFInstability baseline PROMs (IKDC) is attributed to slow conversion of these cases from the *general* cohort to the *TFInstability* cohort and the cohort-specific questionnaire being missed prior to surgery.

The registry database needs backfilling with regards to confirming the surgical status of records added with \>500 records in the *KneeArthritis* cohort alone needing surgery date or theatre data to be entered to provide the necessary context for interpreting PROMs collected. Overall, the registry also includes a number of records that have information indicating an attendance to an initial clinic appointment, but no confirmation that surgery has occurred.

# Recommendations

The following recommendations are presented for improving the data quality of the SHARKS dataset;

-   Staff engage with Registry form links presented during daily lists

    -   Ensure that admin forms are completed for all listed appointments in the daily consult list (green table)

        -   Only fill out new entries (bottom red table) if the patient meets the inclusion criteria for the Registry

    -   Ensure that *clinic assessment forms* (CAF) are completed for all active Registry records

    -   Ensure all theatre forms are completed for listed surgeries meeting the inclusion criteria for Registry

-   Implement actions to improve patient awareness and engagement with initial consent process

-   EBMA staff attend the Department to ensure technical barriers are identified and addressed

-   Increase aqssertiveness with respect to followup of existing records (even without upcoming clinic appointment)

## Estimated Burden

```{r}

AFMedian <- median(AdminTable$`Time Taken to Complete (Seconds)`)

TotalAdmin <- round((AFMedian*(InviteN + SumReturnN))/3600,1)

AppointN <- as.numeric(50)

ClinicN <- as.numeric(4)

DailyAdmin <- round(((AFMedian*AppointN)/60)/ClinicN,1)

```

```{epoxy}

The esimated median time to complete an admin form per appointment is {AFMedian} seconds. Per day that translates to {DailyAdmin} minutes per person when the number of appointments is estimated at {AppointN} and the number of staff involved in data collection is {ClinicN}. It should be noted that about the same amount of time is required to complete fewer (but more detailed) clinic assessment forms for each active registry record. In total, it is estimated that since the introduction of SHARKSv2 that {TotalAdmin} hours were required to complete admin forms for all appointments.

```
